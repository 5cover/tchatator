Checks: |
  *,
  -altera*,
  -android*,
  -bugprone-assignment-in-if-condition,
  -bugprone-inc-dec-in-conditions,
  -cert-*-cpp,
  -cert-err33-c,
  -clang-analyzer-cplusplus*,
  -clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling,
  -clang-analyzer-valist.Uninitialized,
  -concurrency-mt-unsafe,
  -cppcoreguidelines*,
  -google-readability-braces-around-statements,
  -google-readability-function-size,
  -hicpp*,
  -linuxkernel*,
  -llvm-header-guard,
  -llvmlibc-restrict-system-libc-headers,
  -modernize*,
  -readability-avoid-nested-conditional-operator,
  -readability-braces-around-statements,
  -readability-enum-initial-value,
  -readability-function-cognitive-complexity,
  -readability-function-size,
  -readability-identifier-length,
  -readability-implicit-bool-conversion,
  -readability-isolate-declaration,
  -readability-magic-numbers,
  -readability-math-missing-parentheses,
  -misc-no-recursion,

CheckOptions:
  - key: readability-identifier-naming.VariableCase
    value: lower_case
  - key: readability-identifier-naming.FunctionCase
    value: lower_case
  - key: readability-identifier-naming.TypedefCase
    value: lower_case

  - key: readability-identifier-naming.GlobalVariableRegex
    value: '^i?gs?p?_[a-z_][a-z_0-9]*$'
  - key: readability-identifier-naming.StaticVariableRegex
    value: '^i?g?sp?_[a-z_][a-z_0-9]*$'
  #- key: readability-identifier-naming.GlobalPointerRegex
  #  value: '^gs?p_[a-z_][a-z_0-9]*$'
  #- key: readability-identifier-naming.LocalPointerRegex
  #  value: '^s?p_[a-z_][a-z_0-9]*$'
  #- key: readability-identifier-naming.PointerParameterPrefix
  #  value: 'out_'
  - key: readability-identifier-naming.TypedefRegex
    value: '^[a-z_][a-z_0-9]*_(?:t|fn)$'

# Additional notes:
# - Function-like macro detection is not supported by clang-tidy; macros are not checked
# - Enforcement of pointer-specific Hungarian notation (e.g. for out_, p_, jo_) is performed solely by the regex, without any semantic check on the pointer type.
# - Enum min/max naming (min_<prefix> and max_<prefix>) and X-macro conventions cannot be enforced automatically.
# - There is no way to validate that unsigned types are used only for sizes and port numbers.
# - Typedef function pointer suffix cannot be represented based on the underlying type: both suffixes are always allowed.
# - Enum constant cases changes depending on whether the enum is anonymous, so this can't be represented either.
# - can't represent pointer conventions because the prefix doesn't apply to opaque handles and pointers to many. just regular pointers.
# - cannot restrict to just out_ parameters