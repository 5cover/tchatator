# .github/workflows/upload-to-sharepoint.yml
name: Upload Code to SharePoint

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  upload:
    runs-on: ubuntu-latest

    env:                       # ⇦ variables réutilisées dans tous les steps
      TENANT_ID:   ${{ secrets.SP_TENANT_ID }}
      CLIENT_ID:   ${{ secrets.SP_CLIENT_ID }}
      CLIENT_SEC:  ${{ secrets.SP_CLIENT_SECRET }}
      SITE_URL:    ${{ secrets.SP_SITE_URL }}      # ex. https://engie.sharepoint.com/sites/ConventionEnforcer
      JQ:          jq                              # alias (déjà installé sur les runners)

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Copy tracked files to tmp dir
      id: prepare
      run: |
        set -euo pipefail
        TMP_DIR="$(mktemp -d)"
        while IFS= read -r file; do
          if [[ -f "$file" ]]; then
            mkdir -p "$TMP_DIR/$(dirname "$file")"
            cp "$file" "$TMP_DIR/$file"
          fi
        done < <(git ls-files)
        echo "TMP_DIR=$TMP_DIR" >> "$GITHUB_OUTPUT"

    - name: Get Graph access token
      id: token
      run: |
        set -euo pipefail
        token_json=$(curl -s -X POST \
          -d "client_id=$CLIENT_ID" \
          -d "client_secret=$CLIENT_SEC" \
          -d "scope=https://graph.microsoft.com/.default" \
          -d "grant_type=client_credentials" \
          "https://login.microsoftonline.com/$TENANT_ID/oauth2/v2.0/token")
        ACCESS_TOKEN=$(echo "$token_json" | $JQ -r '.access_token')
        echo "::add-mask::$ACCESS_TOKEN"
        echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> "$GITHUB_OUTPUT"

    - name: Resolve Site ID and Drive ID
      id: ids
      run: |
        set -euo pipefail
        # Extraire host et chemin relatifs du SITE_URL
        SITE_HOST=$(echo "$SITE_URL" | awk -F/ '{print $3}')                 # engie.sharepoint.com
        SITE_PATH="/$(echo "$SITE_URL" | cut -d/ -f4-)"                      # /sites/ConventionEnforcer
        ACCESS_TOKEN="${{ steps.token.outputs.ACCESS_TOKEN }}"

        SITE_META=$(curl -s -H "Authorization: Bearer $ACCESS_TOKEN" \
          "https://graph.microsoft.com/v1.0/sites/$SITE_HOST:$SITE_PATH")

        SITE_ID=$(echo "$SITE_META" | $JQ -r '.id')
        DRIVE_ID=$(curl -s -H "Authorization: Bearer $ACCESS_TOKEN" \
          "https://graph.microsoft.com/v1.0/sites/$SITE_ID/drive" | $JQ -r '.id')

        echo "SITE_ID=$SITE_ID"   >> "$GITHUB_OUTPUT"
        echo "DRIVE_ID=$DRIVE_ID" >> "$GITHUB_OUTPUT"

    - name: Upload files via Graph
      run: |
        set -euo pipefail
        TMP_DIR="${{ steps.prepare.outputs.TMP_DIR }}"
        ACCESS_TOKEN="${{ steps.token.outputs.ACCESS_TOKEN }}"
        DRIVE_ID="${{ steps.ids.outputs.DRIVE_ID }}"

        export ACCESS_TOKEN DRIVE_ID          # pour la boucle sous `find`

        find "$TMP_DIR" -type f | while IFS= read -r filepath; do
          rel_path="${filepath#$TMP_DIR/}"   # chemin relatif dans le repo
          echo "::group::Upload $rel_path"
          curl -s -X PUT \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @"$filepath" \
            "https://graph.microsoft.com/v1.0/drives/$DRIVE_ID/root:/$rel_path:/content" \
          | $JQ -r '.id' >/dev/null
          echo "::endgroup::"
        done

    - name: Clean tmp dir
      if: always()
      run: rm -rf "${{ steps.prepare.outputs.TMP_DIR }}"
